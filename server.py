import zmq
import json
import socket
from datetime import datetime
class ZeroMQServer:
    def __init__(self, host='*', port=5555):
        self.host = host
        self.port = port
        self.counter = 0
        self.received_data = []
        self.filename = 'received_data.json'

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ZMQ
        self.context = zmq.Context()
        self.socket = self.context.socket(zmq.REP)

    def is_port_available(self, port):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('127.0.0.1', port))
            sock.close()
            return result != 0  # 0 means port is in use
        except:
            return False

    def find_available_port(self, start_port=5555, max_attempts=50):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç"""
        for port in range(start_port, start_port + max_attempts):
            if self.is_port_available(port):
                return port
        return None

    def save_to_file(self, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            try:
                with open(self.filename, 'r') as f:
                    existing_data = json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                existing_data = []

            existing_data.append(data)

            with open(self.filename, 'w') as f:
                json.dump(existing_data, f, indent=2, ensure_ascii=False)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")

    def print_all_data(self):
        """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        try:
            with open(self.filename, 'r') as f:
                data = json.load(f)
                print(f"\n === –í–°–ï –°–û–•–†–ê–ù–Å–ù–ù–´–ï –î–ê–ù–ù–´–ï ({len(data)} –∑–∞–ø–∏—Å–µ–π) ===")
                for i, item in enumerate(data, 1):
                    print(f"   {i}. [{item['timestamp']}] \"{item['message']}\" (–æ—Ç: {item['source']})")
                print("=" * 60 + "\n")
        except FileNotFoundError:
            print("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def run(self):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
            available_port = self.find_available_port(self.port)
            if available_port is None:
                print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤!")
                return

            if available_port != self.port:
                print(f"  –ü–æ—Ä—Ç {self.port} –∑–∞–Ω—è—Ç ‚Üí –∏—Å–ø–æ–ª—å–∑—É—é –ø–æ—Ä—Ç {available_port}")
                self.port = available_port

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç
            bind_address = f"tcp://{self.host}:{self.port}"
            self.socket.bind(bind_address)
            print(f"\n –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
            print(f" –ê–¥—Ä–µ—Å: {bind_address}")
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...")
            print(f"(Android-–∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É)")
            print(f" –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞\n")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            with open('server_port.txt', 'w') as f:
                f.write(str(self.port))

            while True:
                try:
                    # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –ë–õ–û–ö–ò–†–£–Æ–©–ò–ô –≤—ã–∑–æ–≤!
                    print("‚è≥ –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...")
                    message = self.socket.recv_string()
                    self.counter += 1
                    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
                    data = {
                        'timestamp': timestamp,
                        'message': message,
                        'counter': self.counter,
                        'source': 'Android'
                    }

                    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ ‚Äî –≤—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ
                    print(f"\n [–°–û–û–ë–©–ï–ù–ò–ï #{self.counter} –ü–û–õ–£–ß–ï–ù–û]")
                    print(f"–û—Ç: Android-–∫–ª–∏–µ–Ω—Ç")
                    print(f"–í—Ä–µ–º—è: {timestamp}")
                    print(f"–¢–µ–∫—Å—Ç: \"{message}\"")
                    print(f"–°–æ—Ö—Ä–∞–Ω—è—é –≤ {self.filename}...")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                    self.save_to_file(data)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    response = f" –°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ #{self.counter}!"
                    self.socket.send_string(response)

                    print(f" –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: \"{response}\"")
                    print("   " + "-" * 50)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if self.counter % 5 == 0:
                        self.print_all_data()

                except zmq.ZMQError as e:
                    print(f"  –û—à–∏–±–∫–∞ ZeroMQ: {e}")
                    continue
                except Exception as e:
                    print(f" –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    continue

        except KeyboardInterrupt:
            print("\n –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
        except Exception as e:
            print(f" –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            print("üîå –ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–∫–µ—Ç –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç ZeroMQ...")
            self.socket.close()
            self.context.term()
            print(" –°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    server = ZeroMQServer(host='*', port=5555)
    server.run()